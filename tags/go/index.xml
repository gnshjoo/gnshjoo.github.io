<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 개발새발</title>
    <link>https://gnshjoo.github.io/tags/go/</link>
    <description>Recent content in go on 개발새발</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 16 Feb 2021 20:24:39 +0900</lastBuildDate><atom:link href="https://gnshjoo.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About Go mod</title>
      <link>https://gnshjoo.github.io/post/2021-02-16-go-mod/</link>
      <pubDate>Tue, 16 Feb 2021 20:24:39 +0900</pubDate>
      
      <guid>https://gnshjoo.github.io/post/2021-02-16-go-mod/</guid>
      <description>보통 개발을 할때 프로젝트들은 Projects 디렉토리에 넣어서 관리 하였다. 하지만 Go 개발은 ~/gnshjoo/go/src/github.com/gnshjoo/ 이 디렉토리 하위에서 개발을 진행 할 수 밖에 없었다. go mod을 보기 전까지는..
go mod  go mod를 사용하면 좋은 점은 $GOPATH/src 디렉토리 바깥으로 프로젝트 생성이 가능 언제 어디서나 누구라도 항상 동일한 빌드 결과를 보장한다.
 go mod init &amp;lt;module name&amp;gt; go mod init github.com/&amp;lt;username&amp;gt;/&amp;lt;repo&amp;gt; go mod init을 사용할 때 모들 명으로 초기화를 진행 해도 되지만 github.com/&amp;lt;username&amp;gt;/&amp;lt;repo&amp;gt;로 정의 하는 것을 추천한다.</description>
    </item>
    
    <item>
      <title>golang 반복문</title>
      <link>https://gnshjoo.github.io/post/go_repetitive/</link>
      <pubDate>Sat, 03 Oct 2020 19:04:45 +0900</pubDate>
      
      <guid>https://gnshjoo.github.io/post/go_repetitive/</guid>
      <description>1. Head First GO 게임 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;time&amp;#34; ) func main() { seconds := time.Now().Unix() rand.Seed(seconds) target := rand.Intn(100) + 1 fmt.Println(&amp;#34;I&amp;#39;ve chosen a random number between 1 and 100.&amp;#34;) fmt.Println(&amp;#34;Can you guess it?&amp;#34;) reader := bufio.NewReader(os.Stdin) success := false for guesses := 0; guesses &amp;lt; 10; guesses++ { fmt.Println(&amp;#34;You have&amp;#34;, 10-guesses, &amp;#34;guesses left&amp;#34;) fmt.Println(&amp;#34;Make a guess:&amp;#34;) input, err := reader.ReadString(&amp;#39;\n&amp;#39;) if err !</description>
    </item>
    
  </channel>
</rss>
